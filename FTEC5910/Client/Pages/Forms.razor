@page "/forms"

@implements IDisposable
@inject AccountsService accountsService
@inject EMeService eMeService
@inject NavigationManager NavManager
@attribute [Authorize(Roles = "User")]
@inject IJSRuntime  js
@*<p>Current count: @currentCount</p>*@

@*<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>*@

@if (showForm)
{
    if (!showSign)
    {
        <div style="display: flex;align-items: center;">
            <span style="font-size: 2.5em;">Address Change Form</span>
            <div class="pl-5"><a class="@eMeButtonClass" @onclick="StarteMe"><img src="images/eME_en.jpg" style="width: 300px; cursor: pointer;"></a></div>
        </div>
        <p style="border: 1px solid #ced4da;" class="mt-2 ml-2 mr-2 @eMeMessageClass">
            <div style="background-color: #f7f7f7;">
                <span class="ml-2 mr-2">Authorise "iAM Smart" to provide "e-ME" information</span>
            </div>
            <div class="ml-2 mr-2">
                <span style="font-weight:bold">Please follow the steps below:</span>
                <ol>
                    <li style="color: #2b7367;">
                        <div style="">Open "iAM Smart" app in your mobile device</div>
                        <a @onclick="EMeConfirm" target="_blank" style="cursor:pointer;"><img src="images/tap.png" style="width: 60px;"></a>
                    </li>
                    <li>
                        <div>Tap on "To fill"</div>
                    </li>
                    <li>
                        <div>Tap on "Agree to use" to authorise</div>
                    </li>
                </ol>
            </div>
        </p>
        <p></p>
        <EditForm Model="@addressFormModel">
            <h4>Customer Details and Effective Date of Change(s)</h4>

            <div class="input-group mb-1">
                <div class="col-md-3 pl-0 pr-0">
                    <!--class="input-group-prepend  col-md-3 pl-0 pr-0"-->
                    <span class="input-group-text">Full Name</span>
                </div>
                <input class="form-control" @bind-value="StateContainer.User.FullName" readonly />
            </div>
            <div class="input-group mb-1">
                <div class="col-md-3 pl-0 pr-0">
                    <!--class="input-group-prepend  col-md-3 pl-0 pr-0"-->
                    <span class="input-group-text">Effective Date</span>
                </div>
                @*<div class="form-check form-check-inline pl-2">
                    <input class="form-check-input" type="radio" name="inlineRadioOptions1" id="ed_inlineRadio1" value="option1">
                    <label class="form-check-label" for="ed_inlineRadio1">With Immediate Effect</label>
                </div>
                <div class="form-check form-check-inline pl-2">
                    <input class="form-check-input" type="radio" name="inlineRadioOptions1" id="ed_inlineRadio2" value="option2">
                    <label class="form-check-label" for="ed_inlineRadio2">From</label>
                    <input class="form-control ml-2" value="2021-04-30" />
                </div>*@

                <InputRadioGroup Name="effectiveDate" @bind-Value="addressFormModel.EffectiveDate">
                    <div class="form-check form-check-inline pl-2">
                        <InputRadio class="form-check-input" name="effectiveDate" id="effectiveDate1" Value="EffectiveDate.Immediate" />
                        <label class="form-check-label" for="effectiveDate1">With Immediate Effect</label>
                    </div>
                    <div class="form-check form-check-inline pl-2">
                        <InputRadio class="form-check-input" name="effectiveDate" id="effectiveDate2" Value="EffectiveDate.From" />
                        <label class="form-check-label" for="effectiveDate2">From</label>
                        <InputDate class="form-control ml-2" id="effectiveFrom" @bind-Value="addressFormModel.EffectiveDateFrom"/>
                    </div>
                </InputRadioGroup>

            </div>
            <h4>Current Address</h4>
            <div class="mb-1">
                <input class="form-control" @bind-value="StateContainer.User.Address" readonly />
            </div>
            <h4>New Address</h4>
            <div class="input-group mb-1">
                <div class="col-md-3 pl-0 pr-0">
                    <!--class="input-group-prepend  col-md-3 pl-0 pr-0"-->
                    <span class="input-group-text">Address Type</span>
                </div>
                <InputRadioGroup Name="addressType" @bind-Value="addressFormModel.AddressType">
                    <div class="form-check form-check-inline pl-2">
                        <InputRadio class="form-check-input" name="addressType" id="addressType1" Value="AddressType.Residential" />
                        <label class="form-check-label" for="addressType1">Residential</label>
                    </div>
                    <div class="form-check form-check-inline pl-2">
                        <InputRadio class="form-check-input" name="addressType" id="addressType2" Value="AddressType.ResidentialAndCorrespondence" />
                        <label class="form-check-label" for="addressType2">Residential and Correspondence</label>
                    </div>
                    <div class="form-check form-check-inline pl-2">
                        <InputRadio class="form-check-input" name="addressType" id="addressType3" Value="AddressType.PermanentAndCorrespondence" />
                        <label class="form-check-label" for="addressType3">Permanent and Correspondence</label>
                    </div>
                    <div class="form-check form-check-inline pl-2">
                        <InputRadio class="form-check-input" name="addressType" id="addressType4" Value="AddressType.Permanent" />
                        <label class="form-check-label" for="addressType4">Permanent</label>
                    </div>
                </InputRadioGroup>
            </div>
            <div class="input-group mb-1">
                <div class="col-md-3 pl-0 pr-0">
                    <!--class="input-group-prepend  col-md-3 pl-0 pr-0"-->
                    <span class="input-group-text">Address Details</span>
                </div>
            </div>
            <div class="form-row pl-3">
                <div class="form-group col-md-3">
                    <label for="inputRoom">Room</label>
                    <InputText type="text" class="form-control" id="inputRoom" @bind-Value="addressFormModel.Room"/>
                </div>
                <div class="form-group col-md-3">
                    <label for="inputFlat">Flat</label>
                    <InputText type="text" class="form-control" id="inputFlat" @bind-Value="addressFormModel.Flat"/>
                </div>
                <div class="form-group col-md-3">
                    <label for="inputFloor">Floor</label>
                    <InputText type="text" class="form-control" id="inputFloor" @bind-Value="addressFormModel.Floor"/>
                </div>
                <div class="form-group col-md-3">
                    <label for="inputBlock">Block </label>
                    <InputText type="text" class="form-control" id="inputBlock" @bind-Value="addressFormModel.Block"/>
                </div>
            </div>
            <div class="form-row pl-3">
                <div class="form-group col-md-12">
                    <label for="inputBuilding">Name of Building</label>
                    <InputText type="text" class="form-control" id="inputBuilding" @bind-Value="addressFormModel.Building"/>
                </div>
            </div>
            <div class="form-row pl-3">
                <div class="form-group col-md-12">
                    <label for="inputEstate">Name of Estate</label>
                    <InputText type="text" class="form-control" id="inputEstate" @bind-Value="addressFormModel.Estate"/>
                </div>
            </div>
            <div class="form-row pl-3">
                <div class="form-group col-md-12">
                    <label for="inputStreet">Number and Name of Street/Road</label>
                    <InputText type="text" class="form-control" id="inputStreet" @bind-Value="addressFormModel.Street"/>
                </div>
            </div>
            <div class="form-row pl-3">
                <div class="form-group col-md-12">
                    <label for="inputDistrict">District</label>
                    <div id="inputDistrict">
                        <InputText type="text" class="form-control" id="inputDistrict" @bind-Value="addressFormModel.District"/>
                        <InputRadioGroup Name="districtLarge" @bind-Value="addressFormModel.DistrictLarge">
                            <div class="form-check form-check-inline">
                                <InputRadio class="form-check-input" name="districtLarge" id="districtLarge1" Value="DistrictLarge.HK" />
                                <label class="form-check-label" for="districtLarge1">Hong Kong</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <InputRadio class="form-check-input" name="districtLarge" id="districtLarge2" Value="DistrictLarge.KLN" />
                                <label class="form-check-label" for="districtLarge2">Kowloon</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <InputRadio class="form-check-input" name="districtLarge" id="districtLarge3" Value="DistrictLarge.NT" />
                                <label class="form-check-label" for="districtLarge3">New Territories</label>
                            </div>  
                        </InputRadioGroup>
                    </div>
                </div>
            </div>
            <div class="form-row pl-3">
                <div class="form-group col-md-12">
                    <label for="inputCode">Country/Region and Postal Code (For Overseas Address Only)</label>
                    <InputText type="text" class="form-control" id="inputCode" @bind-Value="addressFormModel.CountryAndPostalCode"/>
                </div>
            </div>
            <div class="form-row pl-3">
                <div class="form-group col-md-12">
                    <label for="inputChiAdd">Chinese Correspondence Address</label>
                    <InputText type="text" class="form-control" id="inputChiAdd" @bind-Value="addressFormModel.ChineseAddress" />
                    <InputRadioGroup Name="chineseAddressLarge" @bind-Value="addressFormModel.ChineseAddressLarge">
                        <div class="form-check form-check-inline">
                            <InputRadio class="form-check-input" name="chineseAddressLarge" id="chineseAddressLarge1" Value="ChineseAddressLarge.TW" />
                            <label class="form-check-label" for="chineseAddressLarge1">Taiwan</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <InputRadio class="form-check-input" name="chineseAddressLarge" id="chineseAddressLarge2" Value="ChineseAddressLarge.CHN" />
                            <label class="form-check-label" for="chineseAddressLarge2">Mainland China</label>
                        </div>
                    </InputRadioGroup>
                    @*<div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="inlineRadioOptions4" id="cca_inlineRadio1" value="option1">
                        <label class="form-check-label" for="cca_inlineRadio1">Taiwan</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="inlineRadioOptions4" id="cca_inlineRadio2" value="option2">
                        <label class="form-check-label" for="cca_inlineRadio2">Mainland China</label>
                    </div>*@
                </div>
            </div>
            <div class="form-group pl-3">
                <div class="form-check">                    
                    <InputCheckbox class="form-check-input" type="checkbox" id="gridCheck" @bind-Value="addressFormModel.OptOutChineseAddress"/>
                    <label class="form-check-label" for="gridCheck">
                        Opt-out Chinese Correspondence Address
                    </label>
                </div>
            </div>
            <div class="pb-2 pt-2" />
            <button class="btn btn-primary" @onclick="Sign">Sign Using iAM Smart</button>
            <div class="mt-5 mb-5" />
        </EditForm>

    }
    else
    {
        @*<h1>Please confirm the signing in iAM Smart App</h1>
            <div class="input-group mb-1">
                <div class="input-group-prepend">
                    <span class="input-group-text">Identification Code:</span>
                </div>
                <span>1234</span>
            </div>*@
        <h1>Your application form is sucessfully submited. Reference No. 123456</h1>
    }
}
else
{
    <h1>Forms Available:</h1>
    <button class="btn btn-primary" @onclick="ShowForm">Address Change Form</button>
    <div class="mt-2">Other Forms are coming Soon...</div>
}

@code {
    private bool _disposed = false;

    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }

    private AddressFormModel addressFormModel = new();

    private int currentCount = 0;
    private bool showForm = false;
    private bool showSign = false;
    //private GetUserResponseDto user;

    private string eMeMessageClass = "collapse";
    private string eMeButtonClass = "";

    Timer timer;
    bool timerRunning = false;
    string currentId = "";

    string eMeConfirmLink = "";

    protected override void OnInitialized()
    {
        StateContainer.OnChange += async () => await StateContainerChanged();
    }

    private async Task StateContainerChanged()
    {
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        var a = await AuthenticationState;
        if (a.User.Identity.IsAuthenticated)
        {
            try
            {
                //var state = await AuthenticationState;
                //if (!state.User.Identity.IsAuthenticated)
                //    NavManager.NavigateTo("/", true);

                //user = await accountsService.GetUserInfo();

                if (StateContainer.User == null)
                {
                    StateContainer.User = await accountsService.GetUserInfo();
                    addressFormModel.UserName = StateContainer.User.FullName;
                    addressFormModel.UserId = StateContainer.User.UserID;
                }

            }
            catch (Exception ex)
            {
                //user = new GetUserResponseDto() { FullName = ex.Message };
            }
        }
    }


    private async Task StarteMe()
    {
        eMeMessageClass = "collapse show";
        eMeButtonClass = "collapse";
        var result = await eMeService.AddPoll();
        if (result.RequestID != Guid.Empty)
        {
            string id = result.RequestID.ToString();
            currentId = id;
            eMeConfirmLink = $"{NavManager.BaseUri}ConfirmEMe?id={id}";
            timer = new Timer(OnTimerElapsed, null, 2000, 5000);
        }
    }

    private async Task EMeConfirm()
    {
        var jsResult = await js.InvokeAsync<bool>("openPage", new object[] { eMeConfirmLink });
    }

    private void ShowForm()
    {
        showForm = true;
    }

    private void Sign()
    {
        JsonSerializerOptions options = new JsonSerializerOptions
        {
            Converters = { new JsonStringEnumConverter() }
        };
        ModalService.ShowConfirmModal("Info", JsonSerializer.Serialize(addressFormModel, options));
        //showSign = true;
    }

    private void OnTimerElapsed(object sender)
    {
        if (timerRunning)
        {
            Console.WriteLine($"{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")} Timer is Running - Skip");
        }
        else
        {
            timerRunning = true;
            InvokeAsync(async () =>
            {
                try
                {
                    var result = await eMeService.QueryPoll(currentId);
                    Console.WriteLine($"{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")} Timer - QueryPoll OK - {result.Status}");
                    if (result.Status == "OK")
                    {
                        if (timer != null)
                            timer.Dispose();

                        Console.WriteLine($"{result.Message}");
                        var jsResult = await js.InvokeAsync<bool>("closePage", null);
                        await ModalService.ShowConfirmModal("Success", result.Message);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")} Timer - QueryPoll Fail - {ex.Message}");
                }
                finally
                {
                    timerRunning = false;
                }
            });
        }
    }

    public void Dispose() => Dispose(true);

    public void Dispose(bool disposing)
    {
        if (_disposed)
        {
            return;
        }

        if (disposing)
        {
            StateContainer.OnChange -= async () => await StateContainerChanged();
            if (timer != null)
            {
                timer.Dispose();
            }
        }

        _disposed = true;
    }
}
